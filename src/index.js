"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var express_1 = require("express");
var dotenv_1 = require("dotenv");
var cors_1 = require("cors");
var morgan_1 = require("morgan");
var config_1 = require("./config");
var mongoose_1 = require("mongoose");
var Models_1 = require("./Models");
var swagger_ui_express_1 = require("swagger-ui-express");
var swagger_jsdoc_1 = require("swagger-jsdoc");
var http_1 = require("./http");
var express_validator_1 = require("express-validator");
dotenv_1["default"].config();
var app = (0, express_1["default"])();
// @ts-ignore
mongoose_1["default"].connect(config_1.CONNECTION_URI, { useNewUrlParser: true, useUnifiedTopology: true });
app.use(express_1["default"].json());
app.use((0, morgan_1["default"])('common'));
var allowedOrigins = [
    'http://localhost:8080',
    'http://localhost:1234',
    'http://localhost:3000',
];
app.use((0, cors_1["default"])({
    origin: function (origin, callback) {
        if (!origin)
            return callback(null, true);
        if (allowedOrigins.indexOf(origin) === -1) {
            var message = "The CORS policy for this application does not allow access from origin ".concat(origin);
            return callback(new Error(message), false);
        }
        return callback(null, true);
    }
}));
var swaggerOptions = {
    definition: {
        openapi: '3.0.0',
        info: {
            title: 'Event API',
            version: '1.0.0',
            description: 'Event API with autogenerated swagger doc',
            contact: {
                name: 'Swagger',
                url: 'https://swagger.io',
                email: ''
            },
            servers: ['http://localhost:3000']
        }
    },
    apis: ['index.ts']
};
var swaggerDocs = (0, swagger_jsdoc_1["default"])(swaggerOptions);
app.use('/api-docs', swagger_ui_express_1["default"].serve, swagger_ui_express_1["default"].setup(swaggerDocs));
app.get('/events', function (request, response) { return __awaiter(void 0, void 0, void 0, function () {
    var eventId, _event, _events, events, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                eventId = request.query.eventId;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 5, , 6]);
                if (!eventId) return [3 /*break*/, 3];
                return [4 /*yield*/, Models_1.Event.find({ _id: eventId }).select('-__v')];
            case 2:
                _event = _a.sent();
                if (!_event) {
                    return [2 /*return*/, response.status(http_1.NOT_FOUND).send({
                            message: 'No events found',
                            code: http_1.NOT_FOUND
                        })];
                }
                else {
                    return [2 /*return*/, response.status(http_1.OK).send({
                            code: http_1.OK,
                            data: [_event]
                        })];
                }
                _a.label = 3;
            case 3: return [4 /*yield*/, Models_1.Event.find({}).select('-__v')];
            case 4:
                _events = _a.sent();
                events = _events.map(function (event) { return ({
                    id: event._id.toString(),
                    title: event.title,
                    description: event.description,
                    start: new Date(event.startDate).toLocaleDateString('en-CA'),
                    end: new Date(event.endDate).toLocaleDateString('en-CA')
                }); });
                if (!events) {
                    return [2 /*return*/, response.status(http_1.NOT_FOUND).send({
                            message: 'No events found',
                            code: http_1.NOT_FOUND
                        })];
                }
                else {
                    return [2 /*return*/, response.status(http_1.OK).send({
                            code: http_1.OK,
                            data: events
                        })];
                }
                return [3 /*break*/, 6];
            case 5:
                error_1 = _a.sent();
                return [2 /*return*/, response.status(http_1.SERVER_ERROR).send({
                        code: http_1.SERVER_ERROR,
                        message: 'Unable to fetch events'
                    })];
            case 6: return [2 /*return*/];
        }
    });
}); });
app.post('/event', (0, express_validator_1.body)('title', 'Event title is required')
    .isString()
    .isLength({ min: 6 })
    .trim()
    .escape(), (0, express_validator_1.body)('description', 'Event description is required')
    .isString()
    .isLength({ min: 6 })
    .trim()
    .escape(), (0, express_validator_1.body)('startDate', 'Event startDate is required')
    .isString()
    .isLength({ min: 6 })
    .trim()
    .escape(), (0, express_validator_1.body)('endDate', 'Event endDate is required')
    .isString()
    .isLength({ min: 6 })
    .trim()
    .escape(), function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var errors, body, result, error_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                errors = (0, express_validator_1.validationResult)(req);
                if (!errors.isEmpty()) {
                    return [2 /*return*/, res.status(http_1.BAD_REQUEST).send({
                            errors: errors.array(),
                            code: http_1.BAD_REQUEST
                        })];
                }
                body = req.body;
                if (!body) {
                    return [2 /*return*/, res.status(http_1.BAD_REQUEST).send({
                            code: http_1.BAD_REQUEST,
                            message: 'You must provide a event'
                        })];
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, Models_1.Event.create(body)];
            case 2:
                result = _a.sent();
                return [2 /*return*/, res.status(http_1.CREATED).send({
                        data: result,
                        code: http_1.CREATED
                    })];
            case 3:
                error_2 = _a.sent();
                return [2 /*return*/, res.status(http_1.SERVER_ERROR).send({
                        error: error_2.message,
                        code: http_1.SERVER_ERROR
                    })];
            case 4: return [2 /*return*/];
        }
    });
}); });
app.put('/event/:eventId', (0, express_validator_1.body)('title', 'Event title is required')
    .isString()
    .isLength({ min: 6 })
    .trim()
    .escape(), function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log(req.body);
                return [4 /*yield*/, Models_1.Event.findByIdAndUpdate(req.params.eventId, req.body, { "new": true }, function (err, event) {
                        if (err) {
                            return res.status(http_1.BAD_REQUEST).send({
                                code: http_1.BAD_REQUEST,
                                message: 'Unable to update event'
                            });
                        }
                        else {
                            return res.status(http_1.OK).send({
                                code: http_1.OK,
                                data: event
                            });
                        }
                    })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
app["delete"]('/event/:eventId', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var eventId, response, error_3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                eventId = req.params.eventId;
                if (!eventId) {
                    return [2 /*return*/, res.status(http_1.BAD_REQUEST).send({
                            code: http_1.BAD_REQUEST,
                            message: 'You must provide a event id'
                        })];
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, Models_1.Event.findOneAndRemove(({ _id: eventId }))];
            case 2:
                response = _a.sent();
                if (!response) {
                    return [2 /*return*/, res.status(http_1.NOT_FOUND).send({
                            code: http_1.NOT_FOUND,
                            message: 'Event not found'
                        })];
                }
                else {
                    return [2 /*return*/, res.status(http_1.OK).send({
                            code: http_1.OK,
                            message: 'Event deleted'
                        })];
                }
                return [3 /*break*/, 4];
            case 3:
                error_3 = _a.sent();
                return [2 /*return*/, res.status(http_1.SERVER_ERROR).send({
                        code: http_1.SERVER_ERROR,
                        message: "Couldn't delete event"
                    })];
            case 4: return [2 /*return*/];
        }
    });
}); });
var server = app.listen(config_1.PORT, function () {
    console.log("\u26A1\uFE0F[server]: Server is running at https://localhost:".concat(config_1.PORT));
});
